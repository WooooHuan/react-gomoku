{"version":3,"sources":["Components/Wireframe.js","Utils/gomoku.js","Components/GoButton.js","Components/GoItem.js","Components/GoBoard.js","Components/GameOverPanel.js","Components/MainContainer.js","index.js"],"names":["gridKey","Wireframe","gridItems","Array","i","length","className","Vector2","x","y","this","a","b","Game","onGameOver","round","isOver","faction","Board","size","btnCmpt","blackGoCmpt","whiteGoCmpt","items","pos","go","item","components","push","React","cloneElement","getComponent","key","position","board","direction","startPos","isInRange","subtract","row","getItem","add","Math","min","max","getStartPosition","getRowOfFaction","join","includes","repeat","Go","GoButton","game","setGame","shakeEffect","onClick","setItem","isConnected","gameOver","nextRound","GoItem","GoBoard","useState","getVisibleComponents","GameOverPanel","showMembers","setShowMembers","useEffect","setTimeout","members","window","location","reload","MainContainer","boardContainerRef","useRef","winner","setWinner","ref","current","classList","remove","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.359aea17.chunk.js","sourcesContent":["import './Wireframe.css';\r\n\r\n// for react element key\r\nlet gridKey = 0;\r\n\r\n// 純粹負責畫棋盤\r\nfunction Wireframe() {\r\n  \r\n  // grid 成員，這裡懶得模組化了\r\n  // 直接填入 18 * 18 來繪製 19 路棋盤\r\n  let gridItems = new Array(324);\r\n  for (let i = 0; i < gridItems.length; i++) {\r\n    gridItems[i] = <div className=\"grid-item\" key={gridKey++}></div>\r\n  }\r\n\r\n  return (\r\n    <div className=\"grid-transformer\">\r\n      <div className=\"grid-background\">\r\n        <div className=\"grid-container\">\r\n          {gridItems}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Wireframe;\r\n","import React from 'react';\r\n\r\n// 二維值，用來表達座標與向量\r\nclass Vector2 {\r\n  // 建構式，接收 x, y 兩個參數\r\n  constructor(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n  // 靜態方法，向量相加\r\n  static add(a, b) {\r\n    return new Vector2(a.x + b.x, a.y + b.y);\r\n  }\r\n  // 靜態方法，向量 a 減去向量 b\r\n  static subtract(a, b) {\r\n    return new Vector2(a.x - b.x, a.y - b.y);\r\n  }\r\n}\r\n\r\n// 棋局，負責跟棋局有關的內容\r\nclass Game {\r\n  // 建構式，接收一個在 GameOver 時呼叫的 function\r\n  constructor(onGameOver) {\r\n    this.round = 0;                 // 回合數\r\n    this.isOver = false;            // 棋局是否結束\r\n    this.onGameOver = onGameOver;   // 當期局結束時觸發的 function\r\n  }\r\n\r\n  // 依回合數回傳當時執子的陣營 (以黑子先下為前提)\r\n  get faction() {\r\n    return this.round % 2 ? 'white' : 'black';\r\n  }\r\n  // 進到下一回合\r\n  nextRound() {\r\n    this.round += 1;\r\n  }\r\n  // 棋局結束\r\n  gameOver() {\r\n    this.isOver = true;\r\n    this.onGameOver(this.faction);\r\n  }\r\n}\r\n\r\n// 棋盤，負責跟棋盤有關的內容 (本作業核心)\r\nclass Board {\r\n  // 建構式，接收尺寸與相關元件\r\n  constructor(size, btnCmpt, blackGoCmpt, whiteGoCmpt) {\r\n    const items = new Array(size);\r\n    for (let i = 0; i < size; i++) {\r\n      items[i] = new Array(size);\r\n    }\r\n    this.items = items;               // 棋盤的二維陣列內容\r\n    this.size = size;                 // 棋盤尺寸\r\n    this.btnCmpt = btnCmpt;           // 落子元件，點擊後落子\r\n    this.blackGoCmpt = blackGoCmpt;   // 黑子元件，落子後顯示的黑子\r\n    this.whiteGoCmpt = whiteGoCmpt;   // 白子元件，落子後顯示的白子\r\n  }\r\n  // 回傳位於該座標的陣列內容，接收 Vector2 參數\r\n  getItem(pos) {\r\n    return this.items[pos.x][pos.y];\r\n  }\r\n  // 將棋子依座標寫入二維陣列中，接收 Go (棋子) 與 Vector2 參數\r\n  setItem(go, pos) {\r\n    this.items[pos.x][pos.y] = go;\r\n  }\r\n  // 負責將棋盤內容轉譯為「顯示用」元件，接收 item 參數 (即存於陣列中的內容)\r\n  getComponent(item) {\r\n    if (item) {\r\n      return item.faction === 'black' ?\r\n        this.blackGoCmpt :\r\n        this.whiteGoCmpt;\r\n    }\r\n    return this.btnCmpt;\r\n  }\r\n  // 回傳「顯示用」的棋盤元件陣列，將記錄在棋盤中的資訊，轉換為顯示用的元件陣列\r\n  getVisibleComponents() {\r\n    const components = [];\r\n    for (let x = 0; x < this.items.length; x++) {\r\n      for (let y = 0; y < this.items[x].length; y++) {\r\n        components.push(\r\n          // 依照座標將 item 轉譯成相應的元件，同時對該元件進行 clone 與初始化 (設置 key 與 props)\r\n          React.cloneElement(\r\n            this.getComponent(this.items[x][y]),\r\n            {\r\n              key: `cmpt-${x}-${y}`,\r\n              position: new Vector2(x, y),\r\n              board: this\r\n            }\r\n          ));\r\n      }\r\n    }\r\n    return components;\r\n  }\r\n  // 回傳「判斷連線用」的「起點座標」，接收兩個 Vector2 參數，前者代表座標，後者代表向量\r\n  getStartPosition(pos, direction) {\r\n    let startPos;\r\n    // 以 pos 為起點，反覆進行向量減法，直到退至棋盤邊界\r\n    while (this.isInRange(pos)) {\r\n      startPos = pos;\r\n      pos = Vector2.subtract(pos, direction);\r\n    }\r\n    return startPos;\r\n  }\r\n  // 獲取棋盤上「一整行」的「陣營資訊」，截至棋盤邊界為止\r\n  // 接收兩個 Vector2 參數，前者代表「起點」座標，後者代表該直行的「延伸方向」\r\n  getRowOfFaction(pos, direction) {\r\n    const row = [];\r\n    while (this.isInRange(pos)) {\r\n      const item = this.getItem(pos);\r\n      row.push(item ? item.faction : ' ');\r\n      pos = Vector2.add(pos, direction);\r\n    }\r\n    return row;\r\n  }\r\n  // 判斷輸入的座標是否還在棋盤中，接收 Vector2 參數\r\n  isInRange(pos) {\r\n    return Math.min(pos.x, pos.y) >= 0 &&\r\n      Math.max(pos.x, pos.y) < this.size;\r\n  }\r\n  // 判斷是否已達成連線，接收 Vector2 參數，代表該回合落子時的座標 (每次落子時進行判斷)\r\n  isConnected(pos) {\r\n    // 定義出檢查連線所需的四個方向\r\n    const directions = [\r\n      new Vector2(0, 1),\r\n      new Vector2(1, 0),\r\n      new Vector2(1, 1),\r\n      new Vector2(1, -1)\r\n    ]\r\n    for (let direction of directions) {\r\n      const faction = this.getItem(pos).faction;                // 該座標棋子的所屬陣營\r\n      const startPos = this.getStartPosition(pos, direction);   // 依座標與向量，取得相應的「判斷連線起點」\r\n      const row = this.getRowOfFaction(startPos, direction);    // 依起點與向量，取得一整行的陣營資訊 (陣列形式)\r\n      if (row.join('').includes(faction.repeat(5))) {           // 將陣營陣列轉為字串資訊，檢查該字串是否包含所屬陣營 repeat 5 次的內容 (簡單暴力)\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n// 棋子，當初想了很多，結果最後只存陣營資訊\r\nclass Go {\r\n  // 建構式，接收陣營資訊\r\n  constructor(faction) {\r\n    this.faction = faction;\r\n  }\r\n}\r\n\r\nexport { Vector2, Game, Board, Go };\r\n","import { Go } from '../Utils/gomoku';\r\nimport './GoButton.css';\r\n\r\n// 落子按鈕元件\r\nfunction GoButton({ board, game, setGame, position, shakeEffect }) {\r\n\r\n  // 當按鈕被點擊時\r\n  function onBtnClicked() {\r\n\r\n    // 依照 position 在 board 物件上\r\n    // 建立一個屬於該回合陣營的棋子\r\n    board.setItem(\r\n      new Go(game.faction),\r\n      position\r\n    )\r\n\r\n    // 判斷這一手是否有達成連線\r\n    // 有 → 結束遊戲；沒有 → 下一回合\r\n    if (board.isConnected(position)) {\r\n      game.gameOver();\r\n    } else {\r\n      game.nextRound();\r\n    }\r\n    setGame({ ...game });\r\n    shakeEffect();          // 凡是有落子的場合，一定要，震一下。\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`${game.faction}-go-btn`}\r\n      onClick={onBtnClicked}\r\n    ></div>\r\n  );\r\n}\r\n\r\nexport default GoButton;\r\n","import './GoItem.css';\r\n\r\n// 棋子元件，透過 props 決定陣營\r\n// 酷炫的落子特效都放在這裡\r\nfunction GoItem({ faction, position }) {\r\n  return (\r\n    <div className={`${faction}-go-item`}>\r\n      <div className=\"click-effect\"></div>\r\n      <div className=\"shadow-effect\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GoItem;\r\n","import { useState } from 'react';\r\nimport { Game, Board } from '../Utils/gomoku';\r\nimport './GoBoard.css';\r\n\r\nimport GoButton from './GoButton';\r\nimport GoItem from './GoItem';\r\n\r\n// 棋盤，負責管理棋盤上出現的各種元件\r\nfunction GoBoard({ onGameOver, shakeEffect }) {\r\n  \r\n  // 建立 game state\r\n  // 在初始值欄位創建一個 Game 物件\r\n  // 依建構式填入 onGameOver 函式\r\n  const [game, setGame] = useState(\r\n    new Game(onGameOver)\r\n  );\r\n\r\n  // 建立 board state\r\n  // 在初始值欄位創建一個 Board 物件\r\n  const [board, setBoard] = useState(\r\n    new Board(\r\n      19,                     // 尺寸\r\n      <GoButton               // 落子按鈕元件\r\n        {...{game}}           // game state 相關\r\n        {...{setGame}}        // game state 相關\r\n        {...{shakeEffect}}    // 落子時所需的震動效果\r\n      />,\r\n      <GoItem faction={\"black\"} />, // 黑子元件\r\n      <GoItem faction={\"white\"} />  // 白子元件\r\n    )\r\n  );\r\n\r\n  // 從 board 物件的 getVisibleComponents 方法，取出「呈現用」的相關元件，詳見 board 物件\r\n  return (\r\n    <div className=\"input-transformer\">\r\n      <div className=\"input-background\">\r\n        <div className=\"input-container\">\r\n          {board.getVisibleComponents()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GoBoard;\r\n","import { useState, useEffect } from 'react';\r\nimport './GameOverPanel.css';\r\n\r\n// 其中一方勝出時的結算畫面，當 winner 不為空值時呈現\r\nfunction GameOverPanel({ faction }) {\r\n  const [showMembers, setShowMembers] = useState(false);  // 是否顯示相關內容，與 setTimeout 配合，實現文案延遲出現的效果\r\n\r\n  // 延遲 0.5 秒再改變 state\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setShowMembers(true);\r\n    }, 500);\r\n  }, []);\r\n\r\n  // 延遲呈現的相關內容\r\n  const members =\r\n    <div className=\"members-root\">\r\n      <div className=\"title-text\">\r\n        {\r\n          faction === 'black' ? // 顯示勝利陣營\r\n            '⚫ WINS' :\r\n            '⚪ WINS'\r\n        }\r\n      </div>\r\n      <div\r\n        className=\"try-again-btn\"\r\n        onClick={() => window.location.reload()}  // Try again 被點擊時，直接刷新頁面\r\n      >\r\n        Try again\r\n      </div>\r\n    </div>;\r\n\r\n  // 讀秒後才會顯示內容\r\n  return (\r\n    <div className=\"panel-container\">\r\n      {showMembers ? members : ''}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameOverPanel;\r\n","import { useState, useRef } from 'react';\r\nimport './MainContainer.css';\r\nimport Wireframe from './Wireframe';\r\nimport GoBoard from './GoBoard';\r\nimport GameOverPanel from './GameOverPanel';\r\n\r\nfunction MainContainer() {\r\n  const boardContainerRef = useRef(null);     // 透過 ref 建立參考 board container 的途徑\r\n  const [winner, setWinner] = useState('');   // 作為是否有陣營勝出的依據\r\n\r\n  // 當遊戲結束時所呼叫的函式，設定勝利陣營\r\n  function onGameOver(winner) {\r\n    setWinner(winner);\r\n  }\r\n\r\n  // 透過 class 的置換與 setTimeout 實現落子時的震動效果\r\n  function shakeEffect() {\r\n    boardContainerRef.current.classList.remove('shake-anim');\r\n    setTimeout(() => {\r\n      boardContainerRef.current.classList.add('shake-anim');\r\n    }, 0);\r\n  }\r\n\r\n  // GameOverPanel - 其中一方勝出時的結算畫面，當 winner 不為空值時呈現\r\n  // Wireframe - 純粹負責畫棋盤\r\n  // GoBoard - 棋盤，負責管理棋盤上出現的各種元件\r\n  return (\r\n    <div className=\"main-container\">\r\n      <div className=\"board-container\" ref={boardContainerRef}>\r\n        {winner ? <GameOverPanel faction={winner} /> : ''}\r\n        <Wireframe />\r\n        <GoBoard {...{onGameOver}} {...{shakeEffect}} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainContainer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainContainer from './Components/MainContainer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}